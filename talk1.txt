Responsive Adaptive / Responsible

the web as a platform we dreamed up is based on a few
beautifully simple principles
	maintainability
	accessibility
	predictability
	flexibility
	extensibility - whatever you build should be easy to extend

these principles have always been challenged
	products don't start as services ideas or content, but as
	visuals
	a false belief in "this should look the same everywhere"
	a flawed comparision with more defined, specialised
	environments
	"we don't have time for you to craft - just release this
	thing and we'll fix it later"

the bigger problem is that we have internalised these challenges
	do we need to release more and faster all the time?
	are we ok with building and discarding everything we do over
	and over again?
	are we just plumbers of the web, or is it time to call the
	shots?

as developers of the web, we live in a world of promises...

every week or so there we have some new, incredible tech to play
with...
	web componetns
	service workers
	emscript

incredible - adjective 1. impossible to believe

incredible = lacking responsibility
	everything these days is experimental
	many things need non-standard code or flags to be turned on
	**** missed a line***

impatience and abstraction
	to make things work, we write abstraction libraries
	to make these mmore reusable, we base them on other libraries packages and frameworks
	almost every single one of these ********* (was drinking
	more coffee and missed it again)*****

so who do we innovate for if we can't use it in production?
	ourselves

we have great jobs, we shouldnt feel unhappy or stressed
	things do not burn when we make mistakes
	the environment we work in flows like water, there is a
	constant need for new ideas
	we need to be the masters of uncertainity
	we work in a publication medium, not a software platform

it is time to be more resposible for our work

always question authority
	browser innovation
	standards not implemented in browsers
	magical abstractions
	impressive looking tool chains and development packages

blind faith in abstractions and browser innovation lead to a
terrible state of the web

don't allow scapegoats to get in our way...

i joined microsoft to help with one very important fix the web
very much needed
	microsoft edge

the plan was simple:
	burn ie and let a new browser emerge in the ashes (ie
	firefox)

the idea was to get rid of all the bad ideas of the past
	list of bad IE stuff
we were too late...

replacing old with agreed upon new stuff

never trust a user agent

experimental? probably safe to use..
	webkit-appearance: none
	webkit-gradient

thigns you learn when you write a new js engine
	chakra the javascript engine that powers microsoft edge (a
	link, google it)
	only a 1/3 of the top 3000 sites can benefit from JS
	inlining. reason is lots of scripts instead of
	concatentation.
	you need to optimise a lot of JS in the engine (length
	reading on every iteration of for loops!)
	outdated libraries are still very much in use and clash with
	new JS features (mootools breaking with array.contains(),
	zepto disliking array constructors)
	minifcation used a lot on the web and uglifcation ** MISsed
	some stuff**

things i learned working for browser makers
	it is a constant race not to break the web - every mistake
	web developers make needs to get catered for.
	the pressure is immense. instead of pushing for an
	interoperable web, browsers are constantly compared and
	expected to be different.
	when implementing standards, we find a lot of problems and
	feed them back. that's why a score of 100% in feature tests
	make no sense.
